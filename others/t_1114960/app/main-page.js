"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var lv;
function navigatingTo(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    var dataItems = [
        { "id": 1, "name": "John" }, { "id": 2, "name": "Elizabeth" }, { "id": 3, "name": "Marry" },
        { "id": 4, "name": "Chris" }, { "id": 5, "name": "Elizabeth" }, { "id": 6, "name": "Marry" },
        { "id": 4, "name": "Chris" }, { "id": 8, "name": "Elizabeth" }, { "id": 9, "name": "Marry" },
        { "id": 10, "name": "Chris" }, { "id": 11, "name": "Elizabeth" }, { "id": 12, "name": "Marry" },
        { "id": 13, "name": "Chris" }, { "id": 14, "name": "Elizabeth" }, { "id": 15, "name": "Marry" },
        { "id": 16, "name": "Chris" }, { "id": 17, "name": "Elizabeth" }, { "id": 18, "name": "Marry" },
        { "id": 19, "name": "Chris" }, { "id": 20, "name": "Elizabeth" }, { "id": 21, "name": "Marry" },
        { "id": 22, "name": "Elizabeth" }, { "id": 23, "name": "Marry" }, { "id": 24, "name": "Chris" },
        { "id": 25, "name": "Elizabeth" }, { "id": 26, "name": "Marry" }, { "id": 27, "name": "Chris" },
        { "id": 28, "name": "Elizabeth" }, { "id": 29, "name": "Marry" }, { "id": 30, "name": "Chris" }
    ];
    vm.set("dataItems", dataItems);
    page.bindingContext = vm;
    lv = page.getViewById("lv");
    lv.on("scrollChange", function (args) {
        console.dir(args);
    });
}
exports.navigatingTo = navigatingTo;
function scrollToIndex() {
    lv.scrollToIndex(5);
}
exports.scrollToIndex = scrollToIndex;
function smoothScroll() {
    lv._android.smoothScrollToPosition(11);
}
exports.smoothScroll = smoothScroll;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOENBQXdEO0FBSXhELElBQUksRUFBZSxDQUFDO0FBRXBCLHNCQUE2QixJQUFlO0lBQ3hDLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFN0IsSUFBSSxFQUFFLEdBQUcsSUFBSSx1QkFBVSxFQUFFLENBQUM7SUFDMUIsSUFBSSxTQUFTLEdBQUc7UUFDWixFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUU7UUFDM0YsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFO1FBQzVGLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtRQUM1RixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUU7UUFDL0YsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFO1FBQy9GLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtRQUMvRixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUU7UUFDL0YsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFO1FBQy9GLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtRQUMvRixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUU7S0FBQyxDQUFDO0lBQ3JHLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRS9CLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0lBRXpCLEVBQUUsR0FBZ0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxFQUFFLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxVQUFDLElBQUk7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUM7QUF2QkQsb0NBdUJDO0FBRUQ7SUFDSSxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFGRCxzQ0FFQztBQUVEO0lBQ0ksRUFBRSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRkQsb0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEsIE9ic2VydmFibGUgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3VpL3BhZ2UnO1xuaW1wb3J0IHsgUmFkTGlzdFZpZXcsIFN3aXBlQWN0aW9uc0V2ZW50RGF0YSB9IGZyb20gXCJuYXRpdmVzY3JpcHQtdGVsZXJpay11aS1wcm8vbGlzdHZpZXdcIjtcblxubGV0IGx2OiBSYWRMaXN0VmlldztcblxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpbmdUbyhhcmdzOiBFdmVudERhdGEpIHtcbiAgICBsZXQgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuXG4gICAgbGV0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICBsZXQgZGF0YUl0ZW1zID0gW1xuICAgICAgICB7IFwiaWRcIjogMSwgXCJuYW1lXCI6IFwiSm9oblwiIH0sIHsgXCJpZFwiOiAyLCBcIm5hbWVcIjogXCJFbGl6YWJldGhcIiB9LCB7IFwiaWRcIjogMywgXCJuYW1lXCI6IFwiTWFycnlcIiB9LFxuICAgICAgICB7IFwiaWRcIjogNCwgXCJuYW1lXCI6IFwiQ2hyaXNcIiB9LCB7IFwiaWRcIjogNSwgXCJuYW1lXCI6IFwiRWxpemFiZXRoXCIgfSwgeyBcImlkXCI6IDYsIFwibmFtZVwiOiBcIk1hcnJ5XCIgfSxcbiAgICAgICAgeyBcImlkXCI6IDQsIFwibmFtZVwiOiBcIkNocmlzXCIgfSwgeyBcImlkXCI6IDgsIFwibmFtZVwiOiBcIkVsaXphYmV0aFwiIH0sIHsgXCJpZFwiOiA5LCBcIm5hbWVcIjogXCJNYXJyeVwiIH0sXG4gICAgICAgIHsgXCJpZFwiOiAxMCwgXCJuYW1lXCI6IFwiQ2hyaXNcIiB9LCB7IFwiaWRcIjogMTEsIFwibmFtZVwiOiBcIkVsaXphYmV0aFwiIH0sIHsgXCJpZFwiOiAxMiwgXCJuYW1lXCI6IFwiTWFycnlcIiB9LFxuICAgICAgICB7IFwiaWRcIjogMTMsIFwibmFtZVwiOiBcIkNocmlzXCIgfSwgeyBcImlkXCI6IDE0LCBcIm5hbWVcIjogXCJFbGl6YWJldGhcIiB9LCB7IFwiaWRcIjogMTUsIFwibmFtZVwiOiBcIk1hcnJ5XCIgfSxcbiAgICAgICAgeyBcImlkXCI6IDE2LCBcIm5hbWVcIjogXCJDaHJpc1wiIH0sIHsgXCJpZFwiOiAxNywgXCJuYW1lXCI6IFwiRWxpemFiZXRoXCIgfSwgeyBcImlkXCI6IDE4LCBcIm5hbWVcIjogXCJNYXJyeVwiIH0sXG4gICAgICAgIHsgXCJpZFwiOiAxOSwgXCJuYW1lXCI6IFwiQ2hyaXNcIiB9LCB7IFwiaWRcIjogMjAsIFwibmFtZVwiOiBcIkVsaXphYmV0aFwiIH0sIHsgXCJpZFwiOiAyMSwgXCJuYW1lXCI6IFwiTWFycnlcIiB9LFxuICAgICAgICB7IFwiaWRcIjogMjIsIFwibmFtZVwiOiBcIkVsaXphYmV0aFwiIH0sIHsgXCJpZFwiOiAyMywgXCJuYW1lXCI6IFwiTWFycnlcIiB9LCB7IFwiaWRcIjogMjQsIFwibmFtZVwiOiBcIkNocmlzXCIgfSxcbiAgICAgICAgeyBcImlkXCI6IDI1LCBcIm5hbWVcIjogXCJFbGl6YWJldGhcIiB9LCB7IFwiaWRcIjogMjYsIFwibmFtZVwiOiBcIk1hcnJ5XCIgfSwgeyBcImlkXCI6IDI3LCBcIm5hbWVcIjogXCJDaHJpc1wiIH0sXG4gICAgICAgIHsgXCJpZFwiOiAyOCwgXCJuYW1lXCI6IFwiRWxpemFiZXRoXCIgfSwgeyBcImlkXCI6IDI5LCBcIm5hbWVcIjogXCJNYXJyeVwiIH0sIHsgXCJpZFwiOiAzMCwgXCJuYW1lXCI6IFwiQ2hyaXNcIiB9XTtcbiAgICB2bS5zZXQoXCJkYXRhSXRlbXNcIiwgZGF0YUl0ZW1zKTtcblxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcblxuICAgIGx2ID0gPFJhZExpc3RWaWV3PnBhZ2UuZ2V0Vmlld0J5SWQoXCJsdlwiKTtcbiAgICBsdi5vbihcInNjcm9sbENoYW5nZVwiLCAoYXJncykgPT4ge1xuICAgICAgICBjb25zb2xlLmRpcihhcmdzKVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxUb0luZGV4KCkge1xuICAgIGx2LnNjcm9sbFRvSW5kZXgoNSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhTY3JvbGwoKSB7XG4gICAgbHYuX2FuZHJvaWQuc21vb3RoU2Nyb2xsVG9Qb3NpdGlvbigxMSk7XG59Il19