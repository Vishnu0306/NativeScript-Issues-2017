"use strict";
var main_view_model_1 = require('./main-view-model');
var color_1 = require("color");
var listview_1 = require("nativescript-telerik-ui-pro/listview");
var platform_1 = require("platform");
var listView;
var lblSelection;
var isRad;
var page;
function pageStoriesPagesLoaded(args) {
    page = args.object;
    page.bindingContext = new main_view_model_1.ViewModel();
}
exports.pageStoriesPagesLoaded = pageStoriesPagesLoaded;
function onRadListLoaded(args) {
    var radList = args.object;
    if (args.object instanceof listview_1.RadListView) {
        //console.log("RadListView");
        isRad = true;
    }
}
exports.onRadListLoaded = onRadListLoaded;
function onItemLoading(args) {
    if (args.ios) {
        console.log("setIosListItemTransparentBackground triggered");
        setIosListItemTransparentBackground(args);
    }
}
exports.onItemLoading = onItemLoading;
;
function setIosListItemTransparentBackground(args) {
    console.log("instance of RadListView: " + (args.view.parent instanceof listview_1.RadListView));
    if (platform_1.isIOS) {
        if (args.view.parent instanceof listview_1.RadListView) {
            //transparent, so that list item has same color as page-background
            var iosColor = new color_1.Color(0, 0, 0, 0).ios;
            args.ios.backgroundView.backgroundColor = iosColor;
        }
    }
}
/*  Here are the steps to apply the transparent mode for your modal page.
- run npm install
- go to node_modules/tns-core-modules/ui/page/page.ios.js
- find the method called _showNativeModalView
- change this code:

// if (fullscreen) {
//     this._ios.modalPresentationStyle = 0;
// }

to this one

// if (fullscreen) {
//     this._ios.providesPresentationContextTransitionStyle = true;
//     this._ios.definesPresentationContext = true;
//     this._ios.modalPresentationStyle = UIModalPresentationOverFullScreen;
//     this._ios.view.backgroundColor = UIColor.clearColor;
// }

*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1vZGFsLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLGdDQUEwQixtQkFBbUIsQ0FBQyxDQUFBO0FBQzlDLHNCQUFzQixPQUFPLENBQUMsQ0FBQTtBQUc5Qix5QkFBNEIsc0NBQXNDLENBQUMsQ0FBQTtBQUVuRSx5QkFBc0IsVUFBVSxDQUFDLENBQUE7QUFJakMsSUFBSSxRQUFRLENBQUM7QUFDYixJQUFJLFlBQVksQ0FBQztBQUNqQixJQUFJLEtBQWMsQ0FBQztBQUNuQixJQUFJLElBQVUsQ0FBQztBQUVmLGdDQUF1QyxJQUFJO0lBQ3ZDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ25CLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSwyQkFBUyxFQUFFLENBQUM7QUFDMUMsQ0FBQztBQUhlLDhCQUFzQix5QkFHckMsQ0FBQTtBQUVELHlCQUFnQyxJQUFJO0lBQ2hDLElBQUksT0FBTyxHQUFnQixJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLFlBQVksc0JBQVcsQ0FBQyxDQUFDLENBQUM7UUFDckMsNkJBQTZCO1FBQzdCLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDakIsQ0FBQztBQUNMLENBQUM7QUFOZSx1QkFBZSxrQkFNOUIsQ0FBQTtBQUVELHVCQUE4QixJQUFJO0lBQzlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO1FBQzdELG1DQUFtQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7QUFDTCxDQUFDO0FBTGUscUJBQWEsZ0JBSzVCLENBQUE7QUFBQSxDQUFDO0FBRUYsNkNBQTZDLElBQUk7SUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxZQUFZLHNCQUFXLENBQUMsQ0FBQyxDQUFDO0lBRXJGLEVBQUUsQ0FBQyxDQUFDLGdCQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ1IsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLFlBQVksc0JBQVcsQ0FBQyxDQUFDLENBQUM7WUFDMUMsa0VBQWtFO1lBQ2xFLElBQUksUUFBUSxHQUFHLElBQUksYUFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDO1FBQ3ZELENBQUM7SUFDTCxDQUFDO0FBQ0wsQ0FBQztBQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBbUJFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICd1aS9wYWdlJztcbmltcG9ydCB7IFZpZXdNb2RlbCB9IGZyb20gJy4vbWFpbi12aWV3LW1vZGVsJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcImNvbG9yXCI7XG5cbmltcG9ydCB7IExpc3RWaWV3IH0gZnJvbSBcInVpL2xpc3Qtdmlld1wiO1xuaW1wb3J0IHsgUmFkTGlzdFZpZXcgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXRlbGVyaWstdWktcHJvL2xpc3R2aWV3XCI7XG5cbmltcG9ydCB7IGlzSU9TIH0gZnJvbSBcInBsYXRmb3JtXCI7XG5cbmltcG9ydCAqIGFzIHV0aWxzTW9kdWxlIGZyb20gXCJ1dGlscy91dGlsc1wiO1xuXG52YXIgbGlzdFZpZXc7XG52YXIgbGJsU2VsZWN0aW9uO1xubGV0IGlzUmFkOiBib29sZWFuO1xubGV0IHBhZ2U6IFBhZ2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdlU3Rvcmllc1BhZ2VzTG9hZGVkKGFyZ3MpIHtcbiAgICBwYWdlID0gYXJncy5vYmplY3Q7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyBWaWV3TW9kZWwoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uUmFkTGlzdExvYWRlZChhcmdzKSB7XG4gICAgbGV0IHJhZExpc3QgPSA8UmFkTGlzdFZpZXc+YXJncy5vYmplY3Q7XG4gICAgaWYgKGFyZ3Mub2JqZWN0IGluc3RhbmNlb2YgUmFkTGlzdFZpZXcpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIlJhZExpc3RWaWV3XCIpO1xuICAgICAgICBpc1JhZCA9IHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb25JdGVtTG9hZGluZyhhcmdzKSB7XG4gICAgaWYgKGFyZ3MuaW9zKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwic2V0SW9zTGlzdEl0ZW1UcmFuc3BhcmVudEJhY2tncm91bmQgdHJpZ2dlcmVkXCIpO1xuICAgICAgICBzZXRJb3NMaXN0SXRlbVRyYW5zcGFyZW50QmFja2dyb3VuZChhcmdzKTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBzZXRJb3NMaXN0SXRlbVRyYW5zcGFyZW50QmFja2dyb3VuZChhcmdzKSB7XG4gICAgY29uc29sZS5sb2coXCJpbnN0YW5jZSBvZiBSYWRMaXN0VmlldzogXCIgKyAoYXJncy52aWV3LnBhcmVudCBpbnN0YW5jZW9mIFJhZExpc3RWaWV3KSk7XG5cbiAgICBpZiAoaXNJT1MpIHtcbiAgICAgICAgaWYgKGFyZ3Mudmlldy5wYXJlbnQgaW5zdGFuY2VvZiBSYWRMaXN0Vmlldykge1xuICAgICAgICAgICAgLy90cmFuc3BhcmVudCwgc28gdGhhdCBsaXN0IGl0ZW0gaGFzIHNhbWUgY29sb3IgYXMgcGFnZS1iYWNrZ3JvdW5kXG4gICAgICAgICAgICB2YXIgaW9zQ29sb3IgPSBuZXcgQ29sb3IoMCwgMCwgMCwgMCkuaW9zO1xuICAgICAgICAgICAgYXJncy5pb3MuYmFja2dyb3VuZFZpZXcuYmFja2dyb3VuZENvbG9yID0gaW9zQ29sb3I7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qICBIZXJlIGFyZSB0aGUgc3RlcHMgdG8gYXBwbHkgdGhlIHRyYW5zcGFyZW50IG1vZGUgZm9yIHlvdXIgbW9kYWwgcGFnZS5cbi0gcnVuIG5wbSBpbnN0YWxsXG4tIGdvIHRvIG5vZGVfbW9kdWxlcy90bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UvcGFnZS5pb3MuanNcbi0gZmluZCB0aGUgbWV0aG9kIGNhbGxlZCBfc2hvd05hdGl2ZU1vZGFsVmlld1xuLSBjaGFuZ2UgdGhpcyBjb2RlOlxuXG4vLyBpZiAoZnVsbHNjcmVlbikge1xuLy8gICAgIHRoaXMuX2lvcy5tb2RhbFByZXNlbnRhdGlvblN0eWxlID0gMDtcbi8vIH1cblxudG8gdGhpcyBvbmVcblxuLy8gaWYgKGZ1bGxzY3JlZW4pIHtcbi8vICAgICB0aGlzLl9pb3MucHJvdmlkZXNQcmVzZW50YXRpb25Db250ZXh0VHJhbnNpdGlvblN0eWxlID0gdHJ1ZTtcbi8vICAgICB0aGlzLl9pb3MuZGVmaW5lc1ByZXNlbnRhdGlvbkNvbnRleHQgPSB0cnVlO1xuLy8gICAgIHRoaXMuX2lvcy5tb2RhbFByZXNlbnRhdGlvblN0eWxlID0gVUlNb2RhbFByZXNlbnRhdGlvbk92ZXJGdWxsU2NyZWVuO1xuLy8gICAgIHRoaXMuX2lvcy52aWV3LmJhY2tncm91bmRDb2xvciA9IFVJQ29sb3IuY2xlYXJDb2xvcjtcbi8vIH1cblxuKi9cbiJdfQ==