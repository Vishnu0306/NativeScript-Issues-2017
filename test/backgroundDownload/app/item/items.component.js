"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var item_service_1 = require("./item.service");
var ItemsComponent = (function () {
    function ItemsComponent(itemService) {
        this.itemService = itemService;
    }
    ItemsComponent.prototype.ngOnInit = function () {
        this.items = this.itemService.getItems();
    };
    ItemsComponent.prototype.onTap = function () {
        var config = NSURLSessionConfiguration.backgroundSessionConfigurationWithIdentifier("org.nativescript.sample");
        var delegate = BackgroundUploadDelegate.alloc().init();
        var session = NSURLSession.sessionWithConfigurationDelegateDelegateQueue(config, delegate, null);
        console.log(session);
        var url = NSURL.URLWithString("https://httpbin.org/image");
        var task = session.downloadTaskWithURL(url);
        task.resume();
    };
    return ItemsComponent;
}());
ItemsComponent = __decorate([
    core_1.Component({
        selector: "ns-items",
        moduleId: module.id,
        templateUrl: "./items.component.html",
    }),
    __metadata("design:paramtypes", [item_service_1.ItemService])
], ItemsComponent);
exports.ItemsComponent = ItemsComponent;
var BackgroundUploadDelegate = (function (_super) {
    __extends(BackgroundUploadDelegate, _super);
    function BackgroundUploadDelegate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // NSURLSessionDelegate
    BackgroundUploadDelegate.prototype.URLSessionDidBecomeInvalidWithError = function (session, error) {
        console.log("URLSessionDidBecomeInvalidWithError:");
        //console.log(" - session: " + session);
        //console.log(" - error:   " + error);
    };
    BackgroundUploadDelegate.prototype.URLSessionDidReceiveChallengeCompletionHandler = function (session, challenge, comlpetionHandler) {
        //console.log("URLSessionDidFinishEventsForBackgroundURLSession: " + session + " " + challenge);
        var disposition = null;
        var credential = null;
        comlpetionHandler(disposition, credential);
    };
    BackgroundUploadDelegate.prototype.URLSessionDidFinishEventsForBackgroundURLSession = function (session) {
        console.log("URLSessionDidFinishEventsForBackgroundURLSession: " + session);
    };
    // NSURLSessionTaskDelegate
    BackgroundUploadDelegate.prototype.URLSessionTaskDidCompleteWithError = function (session, nsTask, error) {
        console.log("URLSessionTaskDidCompleteWithError");
        console.log(error);
    };
    BackgroundUploadDelegate.prototype.URLSessionTaskDidReceiveChallengeCompletionHandler = function (session, task, challenge, completionHandler) {
        console.log("URLSessionTaskDidReceiveChallengeCompletionHandler: " + session + " " + task + " " + challenge);
        var disposition = null;
        var credential = null;
        completionHandler(disposition, credential);
    };
    BackgroundUploadDelegate.prototype.URLSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend = function (nsSession, nsTask, data, sent, expectedTotal) {
        console.log("URLSessionTaskDidSendBodyDataTotalBytesSentTotalBytesExpectedToSend");
    };
    BackgroundUploadDelegate.prototype.URLSessionTaskNeedNewBodyStream = function (session, task, need) {
        console.log("URLSessionTaskNeedNewBodyStream");
    };
    BackgroundUploadDelegate.prototype.URLSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler = function (session, task, redirect, request, completionHandler) {
        console.log("URLSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler");
        completionHandler(request);
    };
    // NSURLSessionDataDelegate
    BackgroundUploadDelegate.prototype.URLSessionDataTaskDidReceiveResponseCompletionHandler = function (session, dataTask, response, completionHandler) {
        console.log("URLSessionDataTaskDidReceiveResponseCompletionHandler");
        var disposition = null;
        completionHandler(disposition);
    };
    BackgroundUploadDelegate.prototype.URLSessionDataTaskDidBecomeDownloadTask = function (session, dataTask, downloadTask) {
        console.log("URLSessionDataTaskDidBecomeDownloadTask");
    };
    BackgroundUploadDelegate.prototype.URLSessionDataTaskDidReceiveData = function (session, dataTask, data) {
        console.log("URLSessionDataTaskDidReceiveData");
    };
    BackgroundUploadDelegate.prototype.URLSessionDataTaskWillCacheResponseCompletionHandler = function () {
        console.log("URLSessionDataTaskWillCacheResponseCompletionHandler");
    };
    // NSURLSessionDownloadDelegate
    BackgroundUploadDelegate.prototype.URLSessionDownloadTaskDidResumeAtOffsetExpectedTotalBytes = function (session, task, offset, expects) {
        console.log("URLSessionDownloadTaskDidResumeAtOffsetExpectedTotalBytes");
    };
    BackgroundUploadDelegate.prototype.URLSessionDownloadTaskDidWriteDataTotalBytesWrittenTotalBytesExpectedToWrite = function (session, task, data, written, expected) {
        console.log("URLSessionDownloadTaskDidWriteDataTotalBytesWrittenTotalBytesExpectedToWrite");
    };
    BackgroundUploadDelegate.prototype.URLSessionDownloadTaskDidFinishDownloadingToURL = function (session, task, url) {
        console.log("URLSessionDownloadTaskDidFinishDownloadingToURL");
        console.log(session);
        console.log(task);
        console.log(url);
    };
    return BackgroundUploadDelegate;
}(NSObject));
BackgroundUploadDelegate.ObjCProtocols = [NSURLSessionDelegate, NSURLSessionTaskDelegate, NSURLSessionDataDelegate, NSURLSessionDownloadDelegate];
//# sourceMappingURL=data:application/json;base64,