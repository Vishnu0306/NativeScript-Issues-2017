"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var modal_dialog_1 = require("nativescript-angular/modal-dialog");
var core_1 = require("@angular/core");
var modal_view_1 = require("./modal-view");
var ItemsComponent = (function () {
    function ItemsComponent(_modalService, vcRef) {
        this._modalService = _modalService;
        this.vcRef = vcRef;
        this.weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
        var oneDay = 24 * 60 * 60 * 1000;
        this.startDate = new Date("2015-12-12");
        this.endDate = new Date();
        this.date = new Date();
        this.days = Math.round(Math.abs((this.startDate.getTime() - this.endDate.getTime()) / (oneDay)));
        this.weekday = this.weekdays[this.date.getDay()];
    }
    ItemsComponent.prototype.createModelView = function (args) {
        var _this = this;
        var that = this;
        var currentDate = new Date();
        var options = {
            viewContainerRef: this.vcRef,
            context: currentDate.toDateString(),
            fullscreen: false
        };
        // >> returning-result
        this._modalService.showModal(modal_view_1.ModalViewComponent, options)
            .then(function (dateresult) {
            console.log("date result " + dateresult);
            // >> (hide)
            if (args === "start") {
                _this.startDate = dateresult;
            }
            else if (args === "end") {
                _this.endDate = dateresult;
            }
            else if (args === "findTheDay") {
                _this.date = dateresult;
                _this.weekday = _this.weekdays[_this.date.getDay()];
            }
            // << (hide)
        });
        // << returning-result
    };
    ItemsComponent.prototype.findDays = function () {
        var oneDay = 24 * 60 * 60 * 1000;
        if (this.startDate.getTime() > this.endDate.getTime()) {
            alert("Enter correct end date");
        }
        else {
            var tmpDays = Math.round(Math.abs((this.startDate.getTime() - this.endDate.getTime()) / (oneDay)));
            console.log(tmpDays);
            this.days = tmpDays;
        }
    };
    return ItemsComponent;
}());
ItemsComponent = __decorate([
    core_1.Component({
        selector: "ns-items",
        moduleId: module.id,
        templateUrl: "./items.component.html"
    }),
    __metadata("design:paramtypes", [modal_dialog_1.ModalDialogService, core_1.ViewContainerRef])
], ItemsComponent);
exports.ItemsComponent = ItemsComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0VBQTJGO0FBQzNGLHNDQUE0RDtBQUU1RCwyQ0FBa0Q7QUFPbEQsSUFBYSxjQUFjO0lBUXZCLHdCQUFvQixhQUFpQyxFQUFVLEtBQXVCO1FBQWxFLGtCQUFhLEdBQWIsYUFBYSxDQUFvQjtRQUFVLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBRi9FLGFBQVEsR0FBRyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRzdGLElBQUksTUFBTSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCx3Q0FBZSxHQUFmLFVBQWdCLElBQUk7UUFBcEIsaUJBd0JDO1FBdkJHLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLFdBQVcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzdCLElBQUksT0FBTyxHQUF1QjtZQUM5QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsS0FBSztZQUM1QixPQUFPLEVBQUUsV0FBVyxDQUFDLFlBQVksRUFBRTtZQUNuQyxVQUFVLEVBQUUsS0FBSztTQUNwQixDQUFDO1FBQ0Ysc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLCtCQUFrQixFQUFFLE9BQU8sQ0FBQzthQUNwRCxJQUFJLENBQUMsVUFBQyxVQUFnQjtZQUNuQixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsQ0FBQztZQUN6QyxZQUFZO1lBQ1osRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ25CLEtBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO1lBQ2hDLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLEtBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO1lBQzlCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO2dCQUN2QixLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQ3JELENBQUM7WUFDRCxZQUFZO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO1FBQ1Asc0JBQXNCO0lBQzFCLENBQUM7SUFFRCxpQ0FBUSxHQUFSO1FBQ0ksSUFBSSxNQUFNLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDcEQsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbkcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNyQixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUN4QixDQUFDO0lBQ0wsQ0FBQztJQUNMLHFCQUFDO0FBQUQsQ0FBQyxBQXJERCxJQXFEQztBQXJEWSxjQUFjO0lBTDFCLGdCQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsVUFBVTtRQUNwQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDbkIsV0FBVyxFQUFFLHdCQUF3QjtLQUN4QyxDQUFDO3FDQVNxQyxpQ0FBa0IsRUFBaUIsdUJBQWdCO0dBUjdFLGNBQWMsQ0FxRDFCO0FBckRZLHdDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kYWxEaWFsb2dTZXJ2aWNlLCBNb2RhbERpYWxvZ09wdGlvbnMgfSBmcm9tIFwibmF0aXZlc2NyaXB0LWFuZ3VsYXIvbW9kYWwtZGlhbG9nXCI7XG5pbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRGF0ZVBpY2tlciB9IGZyb20gXCJ1aS9kYXRlLXBpY2tlclwiO1xuaW1wb3J0IHsgTW9kYWxWaWV3Q29tcG9uZW50IH0gZnJvbSBcIi4vbW9kYWwtdmlld1wiO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogXCJucy1pdGVtc1wiLFxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9pdGVtcy5jb21wb25lbnQuaHRtbFwiXG59KVxuZXhwb3J0IGNsYXNzIEl0ZW1zQ29tcG9uZW50IHtcbiAgICBwdWJsaWMgc3RhcnREYXRlOiBEYXRlO1xuICAgIHB1YmxpYyBlbmREYXRlOiBEYXRlO1xuICAgIHB1YmxpYyBkYXRlOiBEYXRlO1xuICAgIHB1YmxpYyBkYXlzOiBudW1iZXI7XG4gICAgcHVibGljIHdlZWtkYXk6IHN0cmluZztcbiAgICBwdWJsaWMgd2Vla2RheXMgPSBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX21vZGFsU2VydmljZTogTW9kYWxEaWFsb2dTZXJ2aWNlLCBwcml2YXRlIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmKSB7XG4gICAgICAgIGxldCBvbmVEYXkgPSAyNCAqIDYwICogNjAgKiAxMDAwO1xuICAgICAgICB0aGlzLnN0YXJ0RGF0ZSA9IG5ldyBEYXRlKFwiMjAxNS0xMi0xMlwiKTtcbiAgICAgICAgdGhpcy5lbmREYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgdGhpcy5kYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgdGhpcy5kYXlzID0gTWF0aC5yb3VuZChNYXRoLmFicygodGhpcy5zdGFydERhdGUuZ2V0VGltZSgpIC0gdGhpcy5lbmREYXRlLmdldFRpbWUoKSkgLyAob25lRGF5KSkpO1xuICAgICAgICB0aGlzLndlZWtkYXkgPSB0aGlzLndlZWtkYXlzW3RoaXMuZGF0ZS5nZXREYXkoKV07XG4gICAgfVxuXG4gICAgY3JlYXRlTW9kZWxWaWV3KGFyZ3MpIHtcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xuICAgICAgICBsZXQgY3VycmVudERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBsZXQgb3B0aW9uczogTW9kYWxEaWFsb2dPcHRpb25zID0ge1xuICAgICAgICAgICAgdmlld0NvbnRhaW5lclJlZjogdGhpcy52Y1JlZixcbiAgICAgICAgICAgIGNvbnRleHQ6IGN1cnJlbnREYXRlLnRvRGF0ZVN0cmluZygpLFxuICAgICAgICAgICAgZnVsbHNjcmVlbjogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgLy8gPj4gcmV0dXJuaW5nLXJlc3VsdFxuICAgICAgICB0aGlzLl9tb2RhbFNlcnZpY2Uuc2hvd01vZGFsKE1vZGFsVmlld0NvbXBvbmVudCwgb3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKChkYXRlcmVzdWx0OiBEYXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJkYXRlIHJlc3VsdCBcIiArIGRhdGVyZXN1bHQpO1xuICAgICAgICAgICAgICAgIC8vID4+IChoaWRlKVxuICAgICAgICAgICAgICAgIGlmIChhcmdzID09PSBcInN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydERhdGUgPSBkYXRlcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJncyA9PT0gXCJlbmRcIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZERhdGUgPSBkYXRlcmVzdWx0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJncyA9PT0gXCJmaW5kVGhlRGF5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRlID0gZGF0ZXJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWVrZGF5ID0gdGhpcy53ZWVrZGF5c1t0aGlzLmRhdGUuZ2V0RGF5KCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyA8PCAoaGlkZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyA8PCByZXR1cm5pbmctcmVzdWx0XG4gICAgfVxuXG4gICAgZmluZERheXMoKSB7XG4gICAgICAgIGxldCBvbmVEYXkgPSAyNCAqIDYwICogNjAgKiAxMDAwO1xuICAgICAgICBpZiAodGhpcy5zdGFydERhdGUuZ2V0VGltZSgpID4gdGhpcy5lbmREYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgYWxlcnQoXCJFbnRlciBjb3JyZWN0IGVuZCBkYXRlXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRtcERheXMgPSBNYXRoLnJvdW5kKE1hdGguYWJzKCh0aGlzLnN0YXJ0RGF0ZS5nZXRUaW1lKCkgLSB0aGlzLmVuZERhdGUuZ2V0VGltZSgpKSAvIChvbmVEYXkpKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0bXBEYXlzKTtcbiAgICAgICAgICAgIHRoaXMuZGF5cyA9IHRtcERheXM7XG4gICAgICAgIH1cbiAgICB9XG59Il19