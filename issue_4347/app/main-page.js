/*
In NativeScript, a file with the same name as an XML file is known as
a code-behind file. The code-behind is a great place to place your view
logic, and to set up your page’s data binding.
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
var application_1 = require("application");
var permissions = require("nativescript-permissions");
// Event handler for Page "navigatingTo" event attached in main-page.xml
function navigatingTo(args) {
    /*
    This gets a reference this page’s <Page> UI component. You can
    view the API reference of the Page to see what’s available at
    https://docs.nativescript.org/api-reference/classes/_ui_page_.page.html
    */
    var page = args.object;
    page.bindingContext = new main_view_model_1.HelloWorldModel();
}
exports.navigatingTo = navigatingTo;
function takePermissions() {
    permissions.requestPermission([
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.WRITE_EXTERNAL_STORAGE",
        "android.permission.INTERNET",
        "android.permission.WRITE_SETTINGS"
    ], "I need these permissions")
        .then(function (res) {
        console.log("Permissions granted!");
    })
        .catch(function () {
        console.log("No permissions - plan B time!");
    });
}
exports.takePermissions = takePermissions;
function changeBrightness() {
    // var params = androidApp.foregroundActivity.getWindow().getAttributes();
    // params.screenBrightness = 50; // range from 0 - 255 as per docs
    // androidApp.foregroundActivity.getWindow().setAttributes(params);
    // androidApp.foregroundActivity.getWindow().addFlags(android.view.WindowManager.LayoutParams.FLAGS_CHANGED);
    android.provider.Settings.System.putInt(application_1.android.context.getContentResolver(), android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE, android.provider.Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL); //this will set the manual mode (set the automatic mode off)
    android.provider.Settings.System.putInt(application_1.android.context.getContentResolver(), android.provider.Settings.System.SCREEN_BRIGHTNESS, 255); //this will set the brightness to maximum (255)
    //refreshes the screen
    var br = android.provider.Settings.System.getInt(application_1.android.context.getContentResolver(), android.provider.Settings.System.SCREEN_BRIGHTNESS);
    var lp = application_1.android.foregroundActivity.getWindow().getAttributes();
    console.log(br);
    lp.screenBrightness = br / 255;
    application_1.android.foregroundActivity.getWindow().setAttributes(lp);
}
exports.changeBrightness = changeBrightness;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0VBSUU7OztBQUlGLHFEQUFvRDtBQUNwRCwyQ0FBb0Q7QUFHcEQsc0RBQXdEO0FBRXhELHdFQUF3RTtBQUN4RSxzQkFBNkIsSUFBZTtJQUN4Qzs7OztNQUlFO0lBQ0YsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUc3QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksaUNBQWUsRUFBRSxDQUFDO0FBQ2hELENBQUM7QUFWRCxvQ0FVQztBQUVEO0lBQ0ksV0FBVyxDQUFDLGlCQUFpQixDQUFDO1FBQzFCLDBDQUEwQztRQUMxQywyQ0FBMkM7UUFDM0MsNkJBQTZCO1FBQzdCLG1DQUFtQztLQUN0QyxFQUFFLDBCQUEwQixDQUFDO1NBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUc7UUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDO1NBQ0QsS0FBSyxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBQ2pELENBQUMsQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQWJELDBDQWFDO0FBRUQ7SUFDSSwwRUFBMEU7SUFDMUUsa0VBQWtFO0lBQ2xFLG1FQUFtRTtJQUNuRSw2R0FBNkc7SUFFN0csT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxxQkFBVSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFFLDREQUE0RDtJQUN4USxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFVLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUUsK0NBQStDO0lBRTNMLHNCQUFzQjtJQUN0QixJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLHFCQUFVLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLEVBQUUsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDOUksSUFBSSxFQUFFLEdBQUcscUJBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hCLEVBQUUsQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDO0lBQy9CLHFCQUFVLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFmRCw0Q0FlQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5JbiBOYXRpdmVTY3JpcHQsIGEgZmlsZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgYW4gWE1MIGZpbGUgaXMga25vd24gYXNcbmEgY29kZS1iZWhpbmQgZmlsZS4gVGhlIGNvZGUtYmVoaW5kIGlzIGEgZ3JlYXQgcGxhY2UgdG8gcGxhY2UgeW91ciB2aWV3XG5sb2dpYywgYW5kIHRvIHNldCB1cCB5b3VyIHBhZ2XigJlzIGRhdGEgYmluZGluZy5cbiovXG5cbmltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAndWkvcGFnZSc7XG5pbXBvcnQgeyBIZWxsb1dvcmxkTW9kZWwgfSBmcm9tICcuL21haW4tdmlldy1tb2RlbCc7XG5pbXBvcnQgeyBhbmRyb2lkIGFzIGFuZHJvaWRBcHAgfSBmcm9tIFwiYXBwbGljYXRpb25cIjtcbmRlY2xhcmUgdmFyIGFuZHJvaWQ6IGFueTtcblxuaW1wb3J0ICogYXMgcGVybWlzc2lvbnMgZnJvbSBcIm5hdGl2ZXNjcmlwdC1wZXJtaXNzaW9uc1wiO1xuXG4vLyBFdmVudCBoYW5kbGVyIGZvciBQYWdlIFwibmF2aWdhdGluZ1RvXCIgZXZlbnQgYXR0YWNoZWQgaW4gbWFpbi1wYWdlLnhtbFxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpbmdUbyhhcmdzOiBFdmVudERhdGEpIHtcbiAgICAvKlxuICAgIFRoaXMgZ2V0cyBhIHJlZmVyZW5jZSB0aGlzIHBhZ2XigJlzIDxQYWdlPiBVSSBjb21wb25lbnQuIFlvdSBjYW5cbiAgICB2aWV3IHRoZSBBUEkgcmVmZXJlbmNlIG9mIHRoZSBQYWdlIHRvIHNlZSB3aGF04oCZcyBhdmFpbGFibGUgYXRcbiAgICBodHRwczovL2RvY3MubmF0aXZlc2NyaXB0Lm9yZy9hcGktcmVmZXJlbmNlL2NsYXNzZXMvX3VpX3BhZ2VfLnBhZ2UuaHRtbFxuICAgICovXG4gICAgbGV0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcblxuXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyBIZWxsb1dvcmxkTW9kZWwoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VQZXJtaXNzaW9ucygpIHtcbiAgICBwZXJtaXNzaW9ucy5yZXF1ZXN0UGVybWlzc2lvbihbXG4gICAgICAgIFwiYW5kcm9pZC5wZXJtaXNzaW9uLlJFQURfRVhURVJOQUxfU1RPUkFHRVwiLFxuICAgICAgICBcImFuZHJvaWQucGVybWlzc2lvbi5XUklURV9FWFRFUk5BTF9TVE9SQUdFXCIsXG4gICAgICAgIFwiYW5kcm9pZC5wZXJtaXNzaW9uLklOVEVSTkVUXCIsXG4gICAgICAgIFwiYW5kcm9pZC5wZXJtaXNzaW9uLldSSVRFX1NFVFRJTkdTXCJcbiAgICBdLCBcIkkgbmVlZCB0aGVzZSBwZXJtaXNzaW9uc1wiKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlBlcm1pc3Npb25zIGdyYW50ZWQhXCIpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJObyBwZXJtaXNzaW9ucyAtIHBsYW4gQiB0aW1lIVwiKTtcbiAgICAgICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VCcmlnaHRuZXNzKCkge1xuICAgIC8vIHZhciBwYXJhbXMgPSBhbmRyb2lkQXBwLmZvcmVncm91bmRBY3Rpdml0eS5nZXRXaW5kb3coKS5nZXRBdHRyaWJ1dGVzKCk7XG4gICAgLy8gcGFyYW1zLnNjcmVlbkJyaWdodG5lc3MgPSA1MDsgLy8gcmFuZ2UgZnJvbSAwIC0gMjU1IGFzIHBlciBkb2NzXG4gICAgLy8gYW5kcm9pZEFwcC5mb3JlZ3JvdW5kQWN0aXZpdHkuZ2V0V2luZG93KCkuc2V0QXR0cmlidXRlcyhwYXJhbXMpO1xuICAgIC8vIGFuZHJvaWRBcHAuZm9yZWdyb3VuZEFjdGl2aXR5LmdldFdpbmRvdygpLmFkZEZsYWdzKGFuZHJvaWQudmlldy5XaW5kb3dNYW5hZ2VyLkxheW91dFBhcmFtcy5GTEFHU19DSEFOR0VEKTtcblxuICAgIGFuZHJvaWQucHJvdmlkZXIuU2V0dGluZ3MuU3lzdGVtLnB1dEludChhbmRyb2lkQXBwLmNvbnRleHQuZ2V0Q29udGVudFJlc29sdmVyKCksIGFuZHJvaWQucHJvdmlkZXIuU2V0dGluZ3MuU3lzdGVtLlNDUkVFTl9CUklHSFRORVNTX01PREUsIGFuZHJvaWQucHJvdmlkZXIuU2V0dGluZ3MuU3lzdGVtLlNDUkVFTl9CUklHSFRORVNTX01PREVfTUFOVUFMKTsgIC8vdGhpcyB3aWxsIHNldCB0aGUgbWFudWFsIG1vZGUgKHNldCB0aGUgYXV0b21hdGljIG1vZGUgb2ZmKVxuICAgIGFuZHJvaWQucHJvdmlkZXIuU2V0dGluZ3MuU3lzdGVtLnB1dEludChhbmRyb2lkQXBwLmNvbnRleHQuZ2V0Q29udGVudFJlc29sdmVyKCksIGFuZHJvaWQucHJvdmlkZXIuU2V0dGluZ3MuU3lzdGVtLlNDUkVFTl9CUklHSFRORVNTLCAyNTUpOyAgLy90aGlzIHdpbGwgc2V0IHRoZSBicmlnaHRuZXNzIHRvIG1heGltdW0gKDI1NSlcblxuICAgIC8vcmVmcmVzaGVzIHRoZSBzY3JlZW5cbiAgICB2YXIgYnIgPSBhbmRyb2lkLnByb3ZpZGVyLlNldHRpbmdzLlN5c3RlbS5nZXRJbnQoYW5kcm9pZEFwcC5jb250ZXh0LmdldENvbnRlbnRSZXNvbHZlcigpLCBhbmRyb2lkLnByb3ZpZGVyLlNldHRpbmdzLlN5c3RlbS5TQ1JFRU5fQlJJR0hUTkVTUyk7XG4gICAgdmFyIGxwID0gYW5kcm9pZEFwcC5mb3JlZ3JvdW5kQWN0aXZpdHkuZ2V0V2luZG93KCkuZ2V0QXR0cmlidXRlcygpO1xuICAgIGNvbnNvbGUubG9nKGJyKTtcbiAgICBscC5zY3JlZW5CcmlnaHRuZXNzID0gYnIgLyAyNTU7XG4gICAgYW5kcm9pZEFwcC5mb3JlZ3JvdW5kQWN0aXZpdHkuZ2V0V2luZG93KCkuc2V0QXR0cmlidXRlcyhscCk7XG59XG5cbiJdfQ==